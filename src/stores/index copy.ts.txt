import UserStore from './userStore';
import { action, computed, observable } from 'mobx';
import { EocLayoutSettings } from '@/types/src/SiteGlobalSettings';
import { type RenderOptions } from 'amis';
import type CurrentUser from '@/types/src/CurrentUser';
import { getSiteGlobalSettings } from '@/services/amis/siteSettings';
import { deepMerge } from '@/utils';
import defaultAmisEnv from '@/services/amis/AmisEnv';
import ProLayoutProps from '@/Layout/ProLayoutProps';

const _userStore = new UserStore();
const _settings: Partial<EocLayoutSettings> = { ...ProLayoutProps };
const _amisEnv: RenderOptions = { ...defaultAmisEnv } as RenderOptions
class IMainStore {
  @computed
  get settings() {
    return _settings
  }

  @computed
  get amisEnv() {
    return _amisEnv;
  }

  @observable
  showSettingsDrawer?: boolean;

  @observable
  loading?: boolean;

  @computed
  get userStore() {
    return _userStore;
  }

  /**
   * 标记站点设置是否已加载
   */
  @observable
  settingsLoaded: boolean = false;

  @observable
  settingsLoading: boolean = false;
  /**
  * 确保已从服务器获取站点配置，获取完成后保存 到settings 里
  * 配合 store.settingsLoaded=false 重置加载
  */
  @action
  async ensureServerSideSettingsLoaded(userInfo?: CurrentUser
  ): Promise<Partial<EocLayoutSettings>> {
    this.settingsLoading = true;
    const serverConfig = await getSiteGlobalSettings(userInfo);
    console.log('fetchServerSideSettings: from server ', serverConfig);
    deepMerge(_settings, serverConfig)
    deepMerge(_amisEnv, serverConfig?.amis);
    this.settingsLoaded = true
    return _settings;
  }
}

const mainStore = new IMainStore()

export { mainStore, IMainStore }; 